#!/bin/sh
# version 1.0.4

INTERACTIVE=true
CONFIG=./raspg.conf

LF=$(printf '\\\012_')
LF=${LF%_}

#
print_error () {
  echo "ERROR(main): in function $1." 1>&2
  exit 1
}

#
get_config_var() {
  if [ $# -lt 2 ]; then
    echo "ERROR(get_config): usage: get_config <key> <file>." 1>&2
    return 1
  fi
  sed -n "s/$1=\(.*\)$/\1/p" "$2"
}

#
set_config_var() {
  if [ $# -lt 3 ]; then
    echo "ERROR(set_config): usage: set_config <key> <var> <file>." 1>&2
    return 1
  fi
  sed -i -e "s@$1=\(.*\)@$1=$2@g" "$3"
}

# use function from raspi-config
calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
  # output from tput. However in this case, tput detects neither stdout or 
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(( WT_HEIGHT - 7 ))
}

#
get_devlist() {
  ip link | grep mtu | awk '{print $2}' | sed -e "s/:/\ /g"
}

#
get_cidr4 () {
  if [ $# -lt 1 ]; then
    echo "ERROR(get_cidr4): usage: get_cidr4 <ifid>." 1>&2
    return 1
  fi
  ip addr show "$1"							|
   grep inet[^6]							|
   sed 's/.*inet[^6][^0-9]*\([0-9.]*\/[0-9]*\)[^0-9\/]*.*/\1/'		|
   tail -1
  return $?
}

#
get_cidr6 () {
  if [ $# -lt 1 ]; then
    echo "ERROR(get_cidr6): usage: get_cidr6 <ifid>." 1>&2
    return 1
  fi
  ip addr show "$1"							|
   grep inet6								|
   grep -v fe80								|
   sed 's/.*[[:blank:]]\([0-9a-f:]*:[0-9a-f:]*\/[0-9]*\).*/\1/'		|
   tail -1
  return $?
}

#
get_prefix4 () {
  if [ $# -lt 1 ]; then
    echo "ERROR(get_prefix4): usage: get_prefix4 <addr4/plen>." 1>&2
    return 1
  fi
  cmd=$(get_config_var CMD_SIPCALC "$CONFIG")
  network=$($cmd -4 "$1"						|
   grep "Network address"						|
   sed 's/.*Network address[^0-9]*\([0-9.]*\)[^0-9\/]*.*/\1/')
  plen=$(echo $1 | awk -F/ '{print $2}')
  echo "$network/$plen"
}

#
get_pstring4 () {
  if [ $# -lt 1 ]; then
    echo "ERROR(get_pstring4): usage: get_pstring4 <addr4/plen>." 1>&2
    return 1
  fi
  cmd=$(get_config_var CMD_SIPCALC "$CONFIG")
  $cmd -4 "$1"								|
   grep "Network address"						|
   sed 's/.*Network address[^0-9]*\([0-9.]*\)[^0-9\/]*./\1/'
}

#
get_prefix6 () {
  if [ $# -lt 1 ]; then
    echo "ERROR(get_prefix6): usage: get_prefix6 <addr/plen>." 1>&2
    return 1
  fi
  cmd=$(get_config_var CMD_SIPCALC "$CONFIG")
  $cmd -6 "$1"								|
   grep "Subnet prefix"							|
   sed 's/.*[[:blank:]]\([0-9a-f:]*:[0-9a-f:]*\/[0-9]*\).*/\1/'
}

#
get_pstring6 () {
  if [ $# -lt 1 ]; then
    echo "ERROR(get_pstring6): usage: get_pstring6 <prefix/plen>." 1>&2
    return 1
  fi
  cmd=$(get_config_var CMD_SIPCALC "$CONFIG")
  $cmd -6 "$1"								|
   grep "Compressed address"						|
   awk '{print $4}'
}

#
make_hostapd_conf () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do make_hostapd_conf $1"
  fi
  if [ $# -lt 1 ]; then
    echo "ERROR(make_hostapd_conf): usage: make_hostapd_conf <type>." 1>&2
    echo " type: router, bridge." 1>&2
    return 1
  fi
  case "$1" in
  router )
    sed -e "s/__LANIF__/$LAN_IF/g"					\
        -e '/__BRIDGE__/d'						\
        -e "s/__SSID__/$HOSTAPD_SSID/g"					\
        -e "s/__CC__/$HOSTAPD_CC/g"					\
        -e "s/__MODE__/$HOSTAPD_MODE/g"					\
        -e "s/__CH__/$HOSTAPD_CH/g"					\
        -e "s/__PASS__/$HOSTAPD_PASS/g"					\
        "$TEMPL_HOSTAPD" > "$CONF_HOSTAPD"
  ;;
  bridge ) # TBD
    sed -e "s/__LANIF__/$LAN_IF/g"					\
        -e "s/__BRIDGE__/bridge=$BRG_IF/g"				\
        -e "s/__SSID__/$HOSTAPD_SSID/g"					\
        -e "s/__CC__/$HOSTAPD_CC/g"					\
        -e "s/__MODE__/$HOSTAPD_MODE/g"					\
        -e "s/__CH__/$HOSTAPD_CH/g"					\
        -e "s/__PASS__/$HOSTAPD_PASS/g"					\
        "$TEMPL_HOSTAPD" > "$CONF_HOSTAPD"
  ;;
  * ) echo "ERROR(make_hostapd_conf): <type> must be 'router' or"	\
           "'bridge'." 1>&2; return 1 ;;
  esac
  return $?
}

#
make_radvd_conf () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do make_radvd_conf $1 $2 $3 $3 $4 $5"
  fi
  if [ $# -lt 5 ]; then
    echo "ERROR(make_radvd_conf): usage: make_radvd_conf <lflag>"	\
         "<aflag> <oflag> <mflag> <dns>." 1>&2
    echo " lflag/aflag/oflag/mflag/dns: on or off." 1>&2
    return 1
  fi
  sed -e "s/__LANIF__/$LAN_IF/g"					\
      -e "s/__OFLAG__/$3/g"						\
      -e "s/__MFLAG__/$4/g"						\
      -e "s@__LANPREF6__@$LAN_PREF6@g"					\
      -e "s/__LFLAG__/$1/g"						\
      -e "s/__AFLAG__/$2/g"						\
      "$TEMPL_RADVD" > "$CONF_RADVD"
  if [ "X$5" = 'Xon' ]; then
    sed -i -e "s/__RDNSS__/     RDNSS $DNS_RDNSS$LF\
        {$LF\
                AdvRDNSSLifetime 30;$LF\
        };/g"								\
        "$CONF_RADVD"
  else
    sed -i -e '/__RDNSS__/d'						\
        "$CONF_RADVD"
  fi
  return $?
}

#
make_unbound_conf () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do make_unbound_conf $1"
  fi
  if [ $# -lt 1 ]; then
    echo "ERROR(make_unbound_conf): usage: make_unbound_conf <type>." 1>&2
    echo " type: v4only, dual, dns64." 1>&2
    return 1
  fi
  case "$1" in
  v4only )
    sed -e "s/__IPV4ADDR__/    interface: $DNS_DHCP4/g"			\
        -e "s@__IPV4ACL__@    access-control: $LAN_PREF4 allow@g"	\
        -e '/__IPV6ADDR__/d'						\
        -e '/__IPV6ACL__/d'						\
        -e '/__DNS64__/d'						\
        "$TEMPL_UNBOUND" > "$CONF_UNBOUND"
  ;;
  dual )
    sed -e "s/__IPV4ADDR__/    interface: $DNS_DHCP4/g"			\
        -e "s@__IPV4ACL__@    access-control: $LAN_PREF4 allow@g"	\
        -e "s/__IPV6ADDR__/    interface: $DNS_RDNSS$LF\
    interface: $DNS_DHCP6/g"						\
        -e "s@__IPV6ACL__@    access-control: $LAN_PREF6 allow@g"	\
        -e '/__DNS64__/d'						\
        "$TEMPL_UNBOUND" > "$CONF_UNBOUND"
  ;;
  dns64 )
    sed -e "s/__IPV6ADDR__/    interface: $DNS_RDNSS$LF\
    interface: $DNS_DHCP6/g"						\
        -e "s@__IPV6ACL__@    access-control: $LAN_PREF6 allow@g"	\
        -e '/__IPV4ADDR__/d'						\
        -e '/__IPV4ACL__/d'						\
        -e "s@__DNS64__@    module-config: \"dns64 iterator\"${LF}\
    dns64-prefix: $NAT64_PREF${LF}\
forward-zone:${LF}\
    name: \".\"${LF}\
    forward-addr: 8.8.8.8@g"						\
        "$TEMPL_UNBOUND" > "$CONF_UNBOUND"
  ;;
  * ) echo "ERROR(make_unbound_conf): <type> must be 'v4only', 'dual'"	\
           "or 'dns64'." 1>&2; return 1 ;;
  esac
  return $?
}

#
make_def_dhcpd_conf () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do make_def_dhcpd_conf $1"
  fi
  if [ $# -lt 1 ]; then
    echo "ERROR(make_def_dhcpd_conf): usage: make_def_dhcpd_conf"	\
         "<type>." 1>&2
    echo " type: v4only, v6only, dual." 1>&2
    return 1
  fi
  case "$1" in
  v4only )
    sed -e "s/__LAN4IF__/$LAN_IF/g"					\
        -e "s/__LAN6IF__//g"						\
        "$TEMPL_DEFAULT_DHCPD" > "$CONF_DEFAULT_DHCPD"
  ;;
  v6only )
    sed -e "s/__LAN4IF__//g"						\
        -e "s/__LAN6IF__/$LAN_IF/g"					\
        "$TEMPL_DEFAULT_DHCPD" > "$CONF_DEFAULT_DHCPD"
  ;;
  dual )
    sed -e "s/__LAN4IF__/$LAN_IF/g"					\
        -e "s/__LAN6IF__/$LAN_IF/g"					\
        "$TEMPL_DEFAULT_DHCPD" > "$CONF_DEFAULT_DHCPD"
  ;;
  * ) echo "ERROR(make_def_dhcpd_conf): <type> must be 'v4only',"	\
           "'v6only' or 'dual'." 1>&2; return 1 ;;
  esac
  return $?
}

#
make_dhcpd_conf () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do make_dhcpd_conf"
  fi
  subnet=$($CMD_SIPCALC -4 "$LAN_PREF4"					|
   grep "Network address"						|
   sed 's/.*Network address[^0-9]*\([0-9.]*\)[^0-9\/]*.*/\1/')
  netmask=$($CMD_SIPCALC -4 "$LAN_PREF4"				|
   grep "Network mask"							|
   grep -v -e bit -e hex						|
   sed 's/.*Network mask[^0-9]*\([0-9.]*\)[^0-9\/]*.*/\1/')
  gateway=$(echo "$LAN_ADDR4" | awk -F/ '{print $1}')
  sed -e "s/__SUBNET__/subnet $subnet netmask $netmask/g"		\
      -e "s/__RANGE__/${DHCP4_RANGE}/g"					\
      -e "s/__DOMAIN__/$DOMAIN/g"					\
      -e "s/__DNSSRV__/$DNS_DHCP4/g"					\
      -e "s/__GATEWAY__/$gateway/g"					\
      "$TEMPL_DHCPD" > "$CONF_DHCPD"
  return $?
}

#
make_dhcpd6_conf () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do make_dhcpd6_conf $1"
  fi
  if [ $# -lt 1 ]; then
    echo "ERROR(make_dhcpd6_conf): usage: make_dhcpd6_conf <type>." 1>&2
    echo " type: stateless, statefull." 1>&2
    return 1
  fi
  case "$1" in
  stateless )
    sed -e "s@__LANPREF6__@$LAN_PREF6@g"				\
        -e "s/__DOMAIN__/$DOMAIN/g"					\
        -e "s/__DNSSRV__/$DNS_DHCP6/g"					\
        -e '/__RANGE__/d'						\
    "$TEMPL_DHCP6D" > "$CONF_DHCP6D"
  ;;
  statefull )
    sed -e "s@__LANPREF6__@$LAN_PREF6@g"				\
        -e "s/__DOMAIN__/$DOMAIN/g"					\
        -e "s/__DNSSRV__/$DNS_DHCP6/g"					\
        -e "s/__RANGE__/range6 ${DHCP6_RANGE};/g"			\
    "$TEMPL_DHCP6D" > "$CONF_DHCP6D"
  ;;
  * ) echo "ERROR(make_dhcpd6_conf): <type> must be 'stateless' or"	\
           "'statefull'." 1>&2; return 1 ;;
  esac
  return $?
}

#
enable_bridging () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do enable_bridging"
  fi
  sudo ip addr flush dev "$WAN_IF"
  sudo ip addr flush dev "$LAN_IF"
  sudo ip addr flush dev "$BRG_IF"
  sudo brctl addbr "$BRG_IF"
  sudo brctl stp "$BRG_IF" off
  sudo brctl addif "$BRG_IF" "$WAN_IF" "$LAN_IF"
  sudo ip link set dev "$WAN_IF" promisc on
  sudo ip link set dev "$LAN_IF" promisc on
  sudo ip link set dev "$WAN_IF" up
  sudo ip link set dev "$LAN_IF" up
  sudo ip link set dev "$BRG_IF" up
  return $?
}

#
set_wan () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do set_wan $1 at $WAN_IF"
  fi
  if [ $# -lt 1 ]; then
    echo "ERROR(set_wan): usage: set_wan <type>." 1>&2
    return 1
  fi
  case "$1" in
    4 )
      if [ "$VERBOSE" = yes ]; then
        echo " sudo ip -4 addr add $WAN_ADDR4 dev $WAN_IF"
      fi
      sudo ip -4 addr add "$WAN_ADDR4" dev "$WAN_IF"
      # set default route (TBD)
      set_config_var LAST_WANIF "$WAN_IF" "$CONFIG"
    ;;
    6 )
      if [ "$VERBOSE" = yes ]; then
        echo " sudo ip -6 addr add $WAN_ADDR6 dev $LAN_IF"
      fi
      sudo ip -6 addr add "$WAN_ADDR6" dev "$WAN_IF"
      # set default route (TBD)
      set_config_var LAST_WANIF "$WAN_IF" "$CONFIG"
    ;;
    * ) echo "ERROR(set_wan): <type> must be 4 or 6." 1>&2; return 1 ;;
  esac
  return 0
}

#
set_lan () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do set_lan $1 at $LAN_IF"
  fi
  if [ $# -lt 1 ]; then
    echo "ERROR(set_lan): usage: set_lan <type>." 1>&2
    return 1
  fi
  case "$1" in
    4 )
      if [ "$VERBOSE" = yes ]; then
        echo " sudo ip -4 addr add $LAN_ADDR4 dev $LAN_IF"
      fi
      sudo ip -4 addr add "$LAN_ADDR4" dev "$LAN_IF"
      set_config_var LAST_LANIF "$LAN_IF" "$CONFIG"
    ;;
    6 )
      if [ "$VERBOSE" = yes ]; then
        echo " sudo ip -6 addr add $LAN_ADDR6 dev $LAN_IF"
        echo " sudo ip -6 addr add $DNS_RDNSS/64 dev $LAN_IF"
        echo " sudo ip -6 addr add $DNS_DHCP6/64 dev $LAN_IF"
      fi
      sudo ip -6 addr add "$LAN_ADDR6" dev "$LAN_IF"
      sudo ip -6 addr add "$DNS_RDNSS"/64 dev "$LAN_IF"
      sudo ip -6 addr add "$DNS_DHCP6"/64 dev "$LAN_IF"
      set_config_var LAST_LANIF "$LAN_IF" "$CONFIG"
    ;;
    * ) echo "ERROR(set_lan): <type> must be 4 or 6." 1>&2; return 1 ;;
  esac
  return 0
}

#
reset_wan () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do reset_wan at $LAST_WANIF"
  fi
  sudo ip -4 addr flush dev "$LAST_WANIF"
  sudo ip -6 addr flush dev "$LAST_WANIF" scope global
  sudo ip link set down "$LAST_WANIF"
  sudo ip link set up "$LAST_WANIF"
  return 0
}

#
reset_lan () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do reset_lan at $LAST_LANIF"
  fi
  sudo ip -4 addr flush dev "$LAST_LANIF"
  sudo ip -6 addr flush dev "$LAST_LANIF" scope global
  sudo ip link set down "$LAST_LANIF"
  sudo ip link set up "$LAST_LANIF"
  return 0
}

#
enable_v4routing () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do enable_v4routing"
  fi
  sudo sysctl -w net.ipv4.conf.all.forwarding=1
  sudo sysctl -w net.ipv4.conf.all.send_redirects=0
  sudo sysctl -w net.ipv4.conf.all.accept_redirects=0
  return $?
}

#
enable_napt4 () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do enable_napt4"
    echo " iptables -t nat -A POSTROUTING -o $WAN_IF -j MASQUERADE"
  fi
  sudo iptables -t nat -A POSTROUTING -o "$WAN_IF" -j MASQUERADE
  return $?
}

#
reset_iptables () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do reset_iptables"
  fi
  sudo iptables -t nat -F
  sudo iptables -t nat -P INPUT ACCEPT
  sudo iptables -t nat -P OUTPUT ACCEPT
  return $?
}

#
enable_v6routing () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do enable_v6routing"
  fi
  sudo sysctl -w net.ipv6.conf.all.forwarding=1
  sudo sysctl -w net.ipv6.conf.all.accept_redirects=0

  # accept RA on WAN_IF only
  sudo sysctl -w net.ipv6.conf."$WAN_IF".accept_ra=2
  return $?
}

#
enable_napt6 () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do enable_napt6"
    echo " ip6tables -t nat -A POSTROUTING -s $LAN_PREF6 -o $WAN_IF"	\
         "-j MASQUERADE"
  fi
  sudo ip6tables -t nat -A POSTROUTING -s "$LAN_PREF6" -o "$WAN_IF"	\
                 -j MASQUERADE
  return $?
}

#
enable_nptv6 () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do enable_nptv6"
    echo " ip6tables -t mangle -I POSTROUTING -o $WAN_IF -s $LAN_PREF6"	\
         "-j SNPT --src-pfx $LAN_PREF6 --dst-pfx $WAN_PREF6"
    echo " ip6tables -t mangle -I PREROUTING -i $LAN_IF -d $WAN_PREF6"	\
         "-j DNPT --src-pfx $WAN_PREF6 --dst-pfx $LAN_PREF6"
  fi
  sudo sysctl -w net.ipv6.conf.all.proxy_ndp=1

  sudo ip6tables -t mangle -I POSTROUTING -o "$WAN_IF" -s "$LAN_PREF6"	\
                 -j SNPT --src-pfx "$LAN_PREF6" --dst-pfx "$WAN_PREF6"
  sudo ip6tables -t mangle -I PREROUTING -i "$LAN_IF" -d "$WAN_PREF6"	\
                 -j DNPT --src-pfx "$WAN_PREF6" --dst-pfx "$LAN_PREF6"
  return $?
}

#
disable_send_redirect () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do disable_send_redirect: ip6tables -A OUTPUT -p icmpv6"	\
         "--icmpv6-type redirect -j DROP"
  fi
  sudo ip6tables -A OUTPUT -p icmpv6 --icmpv6-type redirect -j DROP
}

#
reset_ip6tables () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do reset_ip6tables"
  fi
  sudo ip6tables -t nat -F
  sudo ip6tables -t nat -P INPUT ACCEPT
  sudo ip6tables -t nat -P OUTPUT ACCEPT
  sudo ip6tables -t mangle -F
  sudo ip6tables -t mangle -P INPUT ACCEPT
  sudo ip6tables -t mangle -P OUTPUT ACCEPT
  sudo ip6tables -t mangle -P FORWARD ACCEPT
  return $?
}

#
enable_nat64 () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do enable_nat64"
    echo "  ip6tables -t mangle -A PREROUTING -j JOOL --instance nat64"
    echo "  iptables -t mangle -A PREROUTING -j JOOL --instance nat64"
  fi
  sudo sysctl -w net.ipv4.conf.all.forwarding=1
  sudo sysctl -w net.ipv6.conf.all.forwarding=1
  # disable offload
#  sudo $CMD_ETHTOOL --offload $WAN_IF gro off
#  sudo $CMD_ETHTOOL --offload $WAN_IF lro off
#  sudo $CMD_ETHTOOL --offload $LAN_IF gro off
#  sudo $CMD_ETHTOOL --offload $LAN_IF lro off
  # enable jool
  sudo modprobe jool
  sudo "$CMD_JOOL" instance add "nat64" --iptables --pool6 "$NAT64_PREF"
  sudo ip6tables -t mangle -A PREROUTING -j JOOL --instance "nat64"
  sudo iptables -t mangle -A PREROUTING -j JOOL --instance "nat64"
  return $?
}

#
disable_nat64 () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do disable_nat64"
  fi
  sudo ip6tables -t mangle -F
  sudo iptables -t mangle -F
  sudo $CMD_JOOL instance remove "nat64" 2>/dev/null
  if lsmod | grep jool > /dev/null; then
    echo " sido modprobe -r jool"
    sudo modprobe -r jool
  fi
  return $?
}

#
reset_sysctl () {
  if [ "$VERBOSE" = yes ]; then
    echo "-- do reset_sysctl"
  fi
  # for enable_v4routing
  sudo sysctl -w net.ipv4.conf.all.forwarding=0
  sudo sysctl -w net.ipv4.conf.all.send_redirects=1
  sudo sysctl -w net.ipv4.conf.all.accept_redirects=1
  # for enable_v6routing
  sudo sysctl -w net.ipv6.conf.all.forwarding=0
  sudo sysctl -w net.ipv6.conf.all.accept_redirects=1
  sudo sysctl -w net.ipv6.conf."$WAN_IF".accept_ra=1
  # for enable_nptv6
  sudo sysctl -w net.ipv6.conf.all.proxy_ndp=0
  return $?
}

# M1
do_select_rgmode() {
  if [ "$INTERACTIVE" = true ]; then
    TYPE=$(whiptail --menu "Choose the Raspberry Gate operation mode." 20 100 10 \
      "0" "Bridge(TBD in this version): This mode use bridging between WAN and LAN." \
      "1" "Secure-Bridge(TBD in this version): This mode use bridging between WAN and LAN with FW." \
      "2" "Router: This mode use routing." \
      3>&1 1>&2 2>&3)
    RET=$?
  else
    TYPE=$1
  fi
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    set_config_var MODE_RG "$TYPE" "$CONFIG"
    case $TYPE in
      0 ) STATUS=Bridge ;;
      1 ) STATUS=Secure-Bridge ;;
      2 ) STATUS=Router ;;
      *) whiptail --msgbox "Programmer error: unrecognized option." 20 60 1 ;;
    esac
  fi
  if [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The setting of Raspberry Gate operation mode is $STATUS." 20 60 1
  fi
}

# M2
do_select_v4mode() {
  if [ "$INTERACTIVE" = true ]; then
    TYPE=$(whiptail --menu "Choose the IPv4 operation mode (for router mode)." 20 100 10 \
      "0" "NAT64: This mode dose not use IPv4 (using NAT64/DNS64)." \
      "1" "DHCP: This mode use DHCP." \
      "3" "no-NAT: This mode dose not use NAT (w/o dynamic routing)." \
      3>&1 1>&2 2>&3)
    RET=$?
  else
    TYPE=$1
  fi
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    set_config_var MODE_IPV4 "$TYPE" "$CONFIG"
    case $TYPE in
      0 ) STATUS=NAT64 ;;
      1 ) STATUS=DHCP ;;
      2 ) STATUS=no-NAT ;;
      *) whiptail --msgbox "Programmer error: unrecognized option." 20 60 1 ;;
    esac
  fi
  if [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The setting of IPv4 operation mode is $STATUS." 20 60 1
  fi
}

# M3
do_select_v6mode() {
  if [ "$INTERACTIVE" = true ]; then
    TYPE=$(whiptail --menu "Choose the IPv6 operation mode (for router mode)." 20 100 10 \
      "0" "not-use: This mode dose not use IPv6." \
      "1" "SLAAC-only: This mode use only SLAAC (no IPv6 DNS server)." \
      "2" "SLAAC-RDNSS: This mode use SLAAC with RDNSS option." \
      "3" "SLAAC-OFLAG: This mode use SLAAC with stateless DHCPv6." \
      "4" "SLAAC-RDNSS-OFLAG: This mode use SLAAC with RDNSS option and stateless DHCPv6." \
      "5" "MFLAG: This mode use statefull DHCPv6." \
      "6" "RDNSS-MFLAG: This mode use RDNSS option and statefull DHCPv6." \
      "7" "SLAAC-RDNSS-MFLAG: This mode use SLAAC with RDNSS option and statefull DHCPv6." \
      "8" "SLAAC-RDNSS-MOFLAG: This mode use SLAAC with RDNSS option and statefull DHCPv6 (+o-flag)." \
      "9" "SLAAC-DHCPv6: This mode use SLAAC and statefull DHCPv6 (no m-flag)." \
      "10" "RFC8273: This mode use unique prefix per host (RFC 8273)." \
      3>&1 1>&2 2>&3)
    RET=$?
  else
    TYPE=$1
  fi
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    set_config_var MODE_IPV6 "$TYPE" "$CONFIG"
    case "$TYPE" in
      0 ) STATUS="not-use" ;;
      1 ) STATUS="SLAAC-only" ;;
      2 ) STATUS=SLAAC-RDNSS ;;
      3 ) STATUS=SLAAC-OFLAG ;;
      4 ) STATUS=SLAAC-RDNSS-OFLAG ;;
      5 ) STATUS=MFLAG ;;
      6 ) STATUS=RDNSS-MFLAG ;;
      7 ) STATUS=SLAAC-RDNSS-MFLAG ;;
      8 ) STATUS=SLAAC-RDNSS-MOFLAG ;;
      9 ) STATUS=SLAAC-DHCPv6 ;;
      10 ) STATUS=RFC8273 ;;
      *) whiptail --msgbox "Programmer error: unrecognized option." 20 60 1 ;;
    esac
  fi
  if [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The setting of IPv6 operation mode is $STATUS." 20 60 1
  fi
}

# M4
do_select_nat6mode() {
  if [ "$INTERACTIVE" = true ]; then
    TYPE=$(whiptail --menu "Choose the IPv6 NAT mode (for router mode)." 20 100 10 \
      "0" "no-NAT: This mode dose not use NAT (w/o dynamic routing)." \
      "1" "NPTv6: This mode use IPv6-to-IPv6 Network Prefix Transration (RFC 6296) (not working)." \
      "2" "NAPT6: This mode use Network Address Port Transration (IP masquerade for IPv6)." \
      3>&1 1>&2 2>&3)
    RET=$?
  else
    TYPE=$1
  fi
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    set_config_var MODE_NAT6 "$TYPE" "$CONFIG"
    case $TYPE in
      0 ) STATUS="no-NAT" ;;
      1 ) STATUS=NPTv6 ;;
      2 ) STATUS=NAPT6 ;;
      *) whiptail --msgbox "Programmer error: unrecognized option." 20 60 1 ;;
    esac
  fi
  if [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The setting of IPv6 NAT mode is $STATUS." 20 60 1
  fi
}

# 1
do_mode_menu() {
  FUN=$(whiptail --title "Raspberry Gate Configuration Tool" \
    --menu "Interface Settings" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
    --cancel-button Back --ok-button Select \
    "M1 Raspberry Gate mode: " "Choose Raspberry Gate operation mode." \
    "M2 IPv4 mode: " "Choose IPv4 operation mode." \
    "M3 IPv6 mode: " "Choose IPv6 operation mode." \
    "M4 IPv6 NAT mode: " "Choose IPv6 NAT mode." \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      M1\ *) do_select_rgmode ;;
      M2\ *) do_select_v4mode ;;
      M3\ *) do_select_v6mode ;;
      M4\ *) do_select_nat6mode ;;
      *) whiptail --msgbox "Programmer error: unrecognized option." 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN." 20 60 1
  fi
}

# W1
do_set_wandev() {
  CURRENT=$(get_config_var WAN_IF "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the device name of WAN interface (e.g. wlan0/ra0/eth0)." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var LAST_WANIF "$CURRENT" "$CONFIG"
  set_config_var WAN_IF "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The device name of WAN interface is $NEW." 20 60 1
  fi
}

# W2
do_set_wan4addr() {
  CURRENT=$(get_config_var WAN_ADDR4 "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the IPv4 address on WAN interface (CIDR format). If 'auto', it will be set automatically." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var WAN_ADDR4 "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The IPv4 address on WAN interface is ${NEW}" 20 60 1
  fi
}

# W3
do_set_wan6addr() {
  CURRENT=$(get_config_var WAN_ADDR6 "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the IPv6 address on WAN interface (CIDR format). If 'auto', it will be set automatically." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var WAN_ADDR6 "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The IPv6 address on WAN interface is $NEW" 20 60 1
  fi
}

# W4
do_set_gw4addr() {
  CURRENT=$(get_config_var GW_ADDR4 "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the IPv4 address of Default Gateway. If 'auto', it will be set automatically." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var GW_ADDR4 "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The IPv4 address of Default Gateway is ${NEW}" 20 60 1
  fi
}

# W5
do_set_gw6addr() {
  CURRENT=$(get_config_var GW_ADDR6 "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the IPv6 address of Default Gateway. If 'auto', it will be set automatically." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var GW_ADDR6 "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The IPv6 address of Default Gateway is $NEW" 20 60 1
  fi
}

# 2
do_wan_menu() {
  FUN=$(whiptail --title "Raspberry Gate Configuration Tool" \
    --menu "Target Settings" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
    --cancel-button Back --ok-button Select \
    "W1 device name: " "Set up device name for WAN interface." \
    "W2 IPv4 address: " "Set up IPv4 address on WAN interface." \
    "W3 IPv6 address: " "Set up IPv6 address on WAN interface." \
    "W4 IPv4 dafault gateway: " "Set up IPv4 address of Default Gateway." \
    "W5 IPv6 dafault gateway: " "Set up IPv6 address of Default Gateway." \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      W1\ *) do_set_wandev ;;
      W2\ *) do_set_wan4addr ;;
      W3\ *) do_set_wan6addr ;;
      W4\ *) do_set_gw4addr ;;
      W5\ *) do_set_gw6addr ;;
      *) whiptail --msgbox "Programmer error: unrecognized option." 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN." 20 60 1
  fi
}

# L1
do_set_landev() {
  CURRENT=$(get_config_var LAN_IF "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the device name of LAN interface (e.g. wlan0/ra0/eth0)." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var LAST_LANIF "$CURRENT" "$CONFIG"
  set_config_var LAN_IF "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The device name of LAN interface is $NEW." 20 60 1
  fi
}

# L2
do_hostapd() {
  DEFAULT=--defaultno
  if [ "$INTERACTIVE" = true ]; then
    whiptail --yesno "Would you like the hostapd to be enabled?" $DEFAULT 20 60 2
    RET=$?
  else
    RET=$1
  fi
  if [ "$RET" -eq 0 ]; then
    USE_HOSTAPD=yes
    STATUS=enabled
  elif [ "$RET" -eq 1 ]; then
    USE_HOSTAPD=no
    STATUS=disabled
  else
    return "$RET"
  fi
  if [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The hostapd is $STATUS" 20 60 1
  fi
}

# L3
do_set_lan4addr() {
  CURRENT=$(get_config_var LAN_ADDR4 "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the IPv4 address on LAN interface (CIDR format)." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var LAN_ADDR4 "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The IPv4 address on LAN interface is $NEW." 20 60 1
  fi
}

# L4
do_set_lan6addr() {
  CURRENT=$(get_config_var LAN_ADDR6 "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the IPv6 address on LAN interface (CIDR format)." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var LAN_ADDR6 "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The IPv6 address on LAN interface is $NEW." 20 60 1
  fi
}

# 3
do_lan_menu() {
  FUN=$(whiptail --title "Raspberry Gate Configuration Tool" \
    --menu "Target Settings" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
    --cancel-button Back --ok-button Select \
    "L1 device name: " "Set up device name of LAN interface." \
    "L2 hostapd: " "Enable/Disable Wi-Fi access point daemon." \
    "L3 IPv4 address: " "Set up IPv4 address on LAN interface." \
    "L4 IPv6 address: " "Set up IPv6 address on LAN interface." \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      L1\ *) do_set_landev ;;
      L2\ *) do_hostapd ;;
      L3\ *) do_set_lan4addr ;;
      L4\ *) do_set_lan6addr ;;
      *) whiptail --msgbox "Programmer error: unrecognized option." 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN." 20 60 1
  fi
}

# S1
do_set_domain() {
  CURRENT=$(get_config_var DOMAIN "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the domain name." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var DOMAIN "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The domain name is $NEW." 20 60 1
  fi
}

# S2
do_set_dnsrdnss() {
  LAN_ADDR6=$(get_config_var LAN_ADDR6 "$CONFIG")
  LAN_PREF6=$(get_prefix6 "$LAN_ADDR6")
  LAN_PSTR6=$(get_pstring6 "$LAN_PREF6")
  CURRENT=$(get_config_var DNS_RDNSS_ID "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the interface id of DNS server's IPv6 address for RDNSS option ($LAN_PSTR6<num>)." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var DNS_RDNSS_ID "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The DNS server's IPv6 address for RDNSS option is $LAN_PSTR6$NEW." 20 60 1
  fi
}

# S3
do_set_dnsdhcp6() {
  LAN_ADDR6=$(get_config_var LAN_ADDR6 "$CONFIG")
  LAN_PREF6=$(get_prefix6 "$LAN_ADDR6")
  LAN_PSTR6=$(get_pstring6 "$LAN_PREF6")
  CURRENT=$(get_config_var DNS_DHCP6_ID "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the interface id of DNS server's IPv6 address for DHCPv6 service ($LAN_PSTR6<num>)." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var DNS_DHCP6_ID "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The DNS server's IPv6 address for DHCPv6 service is $LAN_PSTR6$NEW." 20 60 1
  fi
}

# S4
do_set_dhcp4range() {
  LAN_ADDR4=$(get_config_var LAN_ADDR4 "$CONFIG")
  LAN_PSTR4=$(get_pstring4 "$LAN_ADDR4")
  CURRENT=$(get_config_var DHCP4_START "$CONFIG")
  START="$1"
  while [ -z "$START" ] && [ "$INTERACTIVE" = true ]; do
    START=$(whiptail --inputbox "Please enter the host part of first IPv4 address in DHCPv4 address pool ($LAN_PSTR4<num>)." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$START" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  CURRENT=$(get_config_var DHCP4_END "$CONFIG")
  END="$2"
  while [ -z "$END" ] && [ "$INTERACTIVE" = true ]; do
    END=$(whiptail --inputbox "Please enter the host part of final IPv4 address in DHCPv4 address pool ($LAN_PSTR4<num>)." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$END" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var DHCP4_START "$START" "$CONFIG"
  set_config_var DHCP4_END "$END" "$CONFIG"
  if [ "${INTERACTIVE}" = true ]; then
    whiptail --msgbox "The IPv4 address range for DHCPv4 service is from $LAN_PSTR4$START to $LAN_PSTR4$END." 20 60 1
  fi
}

# S5
do_set_dhcp6range() {
  LAN_ADDR6=$(get_config_var LAN_ADDR6 "$CONFIG")
  LAN_PREF6=$(get_prefix6 "$LAN_ADDR6")
  LAN_PSTR6=$(get_pstring6 "$LAN_PREF6")
  CURRENT=$(get_config_var DHCP6_START "$CONFIG")
  START="$1"
  while [ -z "$START" ] && [ "$INTERACTIVE" = true ]; do
    START=$(whiptail --inputbox "Please enter the interface id of first IPv6 address in DHCPv6 address pool ($LAN_PSTR6<num>)." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$START" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  CURRENT=$(get_config_var DHCP6_END "$CONFIG")
  END="$2"
  while [ -z "$END" ] && [ "$INTERACTIVE" = true ]; do
    END=$(whiptail --inputbox "Please enter the interface id of final IPv6 address in DHCPv6 address pool ($LAN_PSTR6<num>)." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$END" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var DHCP6_START "$START" "$CONFIG"
  set_config_var DHCP6_END "$END" "$CONFIG"
  if [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The IPv6 address range for DHCPv6 service is from $LAN_PSTR6$START to $LAN_PSTR6$END." 20 60 1
  fi
}

# S6
do_set_nat64pref() {
  CURRENT=$(get_config_var NAT64_PREF "$CONFIG")
  NEW="$1"
  while [ -z "$NEW" ] && [ "$INTERACTIVE" = true ]; do
    NEW=$(whiptail --inputbox "Please enter the NAT64 prefix (default is 64:ff9b::/96)." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEW" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var NAT64_PREF "$NEW" "$CONFIG"
  if [ -n "$NEW" ] && [ "$INTERACTIVE" = true ]; then
    whiptail --msgbox "The NAT64 prefix is $NEW." 20 60 1
  fi
}

# 4
do_service_menu() {
  FUN=$(whiptail --title "Raspberry Gate Configuration Tool" \
    --menu "Target Settings" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
    --cancel-button Back --ok-button Select \
    "S1 DOMAIN setting: " "Set up domain name for DHCPv4/DHCPv6 service." \
    "S2 DNSv6 (RDNSS) address: " "Set up DNS server's IPv6 address for RDNSS option." \
    "S3 DNSv6 (DHCPv6) address: " "Set up DNS server's IPv6 address for DHCPv6 option." \
    "S4 DHCPv4 address range: " "Set up IPv4 address range for DHCPv4 service." \
    "S5 DHCPv6 address range: " "Set up IPv6 address range for DHCPv6 service." \
    "S6 NAT64 prefix: " "Set up NAT64 prefix address." \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ ${RET} -eq 1 ]; then
    return 0
  elif [ ${RET} -eq 0 ]; then
    case "${FUN}" in
      S1\ *) do_set_domain ;;
      S2\ *) do_set_dnsrdnss ;;
      S3\ *) do_set_dnsdhcp6 ;;
      S4\ *) do_set_dhcp4range ;;
      S5\ *) do_set_dhcp6range ;;
      S6\ *) do_set_nat64pref ;;
      *) whiptail --msgbox "Programmer error: unrecognized option." 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN." 20 60 1
  fi
}

# A1
do_set_ssid_pass() {
  SSID="$1"
  while [ -z "$SSID" ] && [ "$INTERACTIVE" = true ]; do
    SSID=$(whiptail --inputbox "Please enter SSID for WAN interface." 20 60 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$SSID" ]; then
      whiptail --msgbox "SSID cannot be empty. Please try again." 20 60
    fi
  done
  PASS="$2"
  while [ -z "$PASS" ] && [ "$INTERACTIVE" = true ]; do
    PASS=$(whiptail --passwordbox "Please enter passphrase for WAN interface." 20 60 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$PASS" ]; then
      whiptail --msgbox "passphrase cannot be empty. Please try again." 20 60
    fi
  done

  sudo raspi-config nonint do_wifi_ssid_passphrase "$SSID" "$PASS"
}

# A2
do_set_hostapd_ssid() {
  CURRENT=$(get_config_var HOSTAPD_SSID "$CONFIG")
  SSID="$1"
  while [ -z "$SSID" ] && [ "$INTERACTIVE" = true ]; do
    SSID=$(whiptail --inputbox "Please enter SSID for hostapd service." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$SSID" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  CURRENT=$(get_config_var HOSTAPD_PASS "$CONFIG")
  PASS="$2"
  while [ -z "$PASS" ] && [ "$INTERACTIVE" = true ]; do
    PASS=$(whiptail --passwordbox "Please enter passphrase for hostapd service." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$PASS" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var HOSTAPD_SSID "$SSID" "$CONFIG"
  set_config_var HOSTAPD_PASS "$PASS" "$CONFIG"
  if [ "${INTERACTIVE}" = true ]; then
    whiptail --msgbox "SSID for hostapd is $SSID." 20 60 1
  fi
}

# A3
do_set_hostapd_others() {
  CURRENT=$(get_config_var HOSTAPD_CC "$CONFIG")
  CC="$1"
  while [ -z "$CC" ] && [ "$INTERACTIVE" = true ]; do
    CC=$(whiptail --inputbox "Please enter country code for hostapd service." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$CC" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  CURRENT=$(get_config_var HOSTAPD_MODE "$CONFIG")
  MODE="$2"
  while [ -z "$MODE" ] && [ "$INTERACTIVE" = true ]; do
    MODE=$(whiptail --inputbox "Please enter Wi-Fi mode (a/g/n) for hostapd service." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$MODE" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  CURRENT=$(get_config_var HOSTAPD_CH "$CONFIG")
  CH="$2"
  while [ -z "$CH" ] && [ "$INTERACTIVE" = true ]; do
    CH=$(whiptail --inputbox "Please enter Wi-Fi channel for hostapd service." 20 60 "$CURRENT" 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$CH" ]; then
      whiptail --msgbox "This parameter cannot be empty. Please try again." 20 60
    fi
  done
  set_config_var HOSTAPD_CC "$CC" "$CONFIG"
  set_config_var HOSTAPD_MODE "$MODE" "$CONFIG"
  set_config_var HOSTAPD_CH "$CH" "$CONFIG"
  if [ "${INTERACTIVE}" = true ]; then
    whiptail --msgbox "The parameters for hostapd are CC=$CC, MODE=$MODE and CH=$CH." 20 60 1
  fi
}

# 5
do_wireless_menu() {
  FUN=$(whiptail --title "Raspberry Gate Configuration Tool" \
    --menu "Target Settings" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
    --cancel-button Back --ok-button Select \
    "A1 (WAN) Wi-Fi for uplink: " "Enter SSID and passphrase (using raspi-config)." \
    "A2 (LAN) hostapd SSID setting: " "Enter SSID and passphrase." \
    "A3 (LAN) hostapd other parameters: " "Enter country, mode and channel." \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ ${RET} -eq 1 ]; then
    return 0
  elif [ ${RET} -eq 0 ]; then
    case "${FUN}" in
      A1\ *) do_set_ssid_pass ;;
      A2\ *) do_set_hostapd_ssid ;;
      A3\ *) do_set_hostapd_others ;;
      *) whiptail --msgbox "Programmer error: unrecognized option." 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN." 20 60 1
  fi
}

# 6
do_restart() {
  whiptail --yesno "Would you like to restart Raspberry Gate now?" 20 60 2
  if [ $? -eq 0 ]; then
    do_restart_raspberrygate
  fi
}

#
do_restart_raspberrygate () {
  # read configuration file
  . $CONFIG

  # check parameters
  if [ -z "$LAN_ADDR4" ]; then
    echo "ERROR(main): LAN_ADDR4 is empty." 1>&2
    exit 1
  fi
  if [ -z "$LAN_ADDR6" ]; then
    echo "ERROR(main): LAN_ADDR6 is empty." 1>&2
    exit 1
  fi

  LAN_PREF4=$(get_prefix4 "$LAN_ADDR4")
  LAN_PSTR4=$(get_pstring4 "$LAN_ADDR4")
  LAN_PREF6=$(get_prefix6 "$LAN_ADDR6")
  LAN_PSTR6=$(get_pstring6 "$LAN_PREF6")

  DNS_DHCP4=$(echo "$LAN_ADDR4" | awk -F/ '{print $1}')

  if [ -z "$DNS_RDNSS_ID" ]; then
    echo "ERROR(main): DNS_RDNSS_ID is empty." 1>&2
    exit 1
  fi
  if [ -z "$DNS_DHCP6_ID" ]; then
    echo "ERROR(main): DNS_DHCP6_ID is empty." 1>&2
    exit 1
  fi
  DNS_RDNSS=$LAN_PSTR6$DNS_RDNSS_ID
  DNS_DHCP6=$LAN_PSTR6$DNS_DHCP6_ID

  if [ -z "$DHCP4_START" ]; then
    echo "ERROR(main): DHCP4_START is empty." 1>&2
    exit 1
  fi
  if [ -z "$DHCP4_END" ]; then
    echo "ERROR(main): DHCP4_END is empty." 1>&2
    exit 1
  fi
  DHCP4_RANGE="$LAN_PSTR4$DHCP4_START $LAN_PSTR4$DHCP4_END"

  if [ -z "$DHCP6_START" ]; then
    echo "ERROR(main): DHCP6_START is empty." 1>&2
    exit 1
  fi
  if [ -z "$DHCP6_END" ]; then
    echo "ERROR(main): DHCP6_END is empty." 1>&2
    exit 1
  fi
  DHCP6_RANGE="$LAN_PSTR6$DHCP6_START $LAN_PSTR6$DHCP6_END"

  # initialize
  reset_sysctl
  reset_iptables
  reset_ip6tables
  #reset_wan
  reset_lan
  disable_nat64
  rm -f "$CONF_DHCPD" "$CONF_DHCP6D" "$CONF_RADVD" "$CONF_UNBOUND"

  # stop hostapd/dhcp/radvd/dhcpv6/unbound
  sudo systemctl stop hostapd
  sudo systemctl stop isc-dhcp-server
  sudo systemctl stop radvd
  sudo systemctl stop unbound

  if [ "$MODE_RG" -eq 0 ]; then
    if [ "$VERBOSE" = yes ]; then
      echo "-- use bridge mode"
    fi
    enable_bridging || print_error enable_bridging
    if [ "$USE_HOSTAPD" = yes ]; then
      if [ "$VERBOSE" = yes ]; then
        echo "-- start hostapd"
      fi
      make_hostapd_conf bridge
      sudo cp "$CONF_HOSTAPD" "$ETC_HOSTAPD"
      rm "$CONF_HOSTAPD"
      sudo systemctl start hostapd
    fi
    return 0
  fi

  if [ "$VERBOSE" = yes ]; then
    echo "-- use router mode"
  fi

  case "$MODE_IPV4" in
    0 )
      if [ "$MODE_IPV6" -eq 0 ] || [ "$MODE_IPV6" -eq 1 ]; then
        print_usage
      fi
      enable_nat64 || print_error enable_nat64
      make_unbound_conf dns64
      ;;
    1 )
      if [ "$WAN_ADDR4" != 'auto' ]; then
        set_wan 4 || print_error "set_lan 4"
      else
        WAN_ADDR4=$(get_cidr4 "$WAN_IF")
        if [ -z "$WAN_ADDR4" ]; then
          echo "ERROR(main): WAN_ADDR4 can not be obtained." 1>&2
          exit 1
        fi
        WAN_PREF4=$(get_prefix4 "$WAN_ADDR4")
      fi
      set_lan 4 || print_error "set_lan 4"
      enable_v4routing || print_error enable_v4routing
      enable_napt4 || print_error enable_napt4
      make_dhcpd_conf
      make_unbound_conf dual
      ;;
  2 )
    if [ "$WAN_ADDR4" != 'auto' ]; then
      set_wan 4 || print_error "set_lan 4"
    else
      echo "ERROR(main): can not use 'WAN_ADDR4=auto' at MODE_IPV4=$MODE_IPV4." 1>&2
      exit 1
    fi
    if [ "$VERBOSE" = yes ]; then
      echo "!!!! LAN IPv4 route must be manually set to gateway. !!!!"
    fi
    set_lan 4 || print_error "set_lan 4"
    enable_v4routing || print_error enable_v4routing
    make_dhcpd_conf
    make_unbound_conf dual
    ;;
    * ) echo "ERROR(main): <IPv4_mode> must be between 0 and 2." 1>&2; return 1 ;;
  esac

  case "$MODE_IPV6" in
    0 )
      make_unbound_conf v4only
      ;;
    1 )
      make_radvd_conf on on off off off
      ;;
    2 )
      make_radvd_conf on on off off on
      ;;
    3 )
      make_radvd_conf on on on off off
      make_dhcpd6_conf stateless
      ;;
    4 )
      make_radvd_conf on on on off on
      make_dhcpd6_conf stateless
      ;;
    5 )
      make_radvd_conf on off off on off
      make_dhcpd6_conf statefull
      ;;
    6 )
      make_radvd_conf on off off on on
      make_dhcpd6_conf statefull
      ;;
    7 )
      make_radvd_conf on on off on on
      make_dhcpd6_conf statefull
      ;;
    8 )
      make_radvd_conf on on on on on
      make_dhcpd6_conf statefull
      ;;
    9 )
      make_radvd_conf on on off off off
      make_dhcpd6_conf statefull
      ;;
    10 )
      make_radvd_conf off on off off off
      disable_send_redirect || print_error disable_send_redirect
      ;;
    * ) echo "ERROR(main): <IPv6_mode> must be between 0 and 8." 1>&2; return 1 ;;
  esac

  if [ "$MODE_IPV6" -ne 0 ]; then
    if [ "$WAN_ADDR6" != 'auto' ]; then
      set_wan 6 || print_error "set_lan 6"
    else
      WAN_ADDR6=$(get_cidr6 "$WAN_IF")
      if [ -z "$WAN_ADDR6" ]; then
        echo "ERROR(main): WAN_ADDR6 can not be obtained." 1>&2
        exit 1
      fi
      WAN_PREF6=$(get_prefix6 "$WAN_ADDR6")
    fi
    set_lan 6 || print_error "set_lan 6"
    enable_v6routing || print_error enable_v6routing
  fi

  case "$MODE_NAT6" in
    0 )
      if [ "$VERBOSE" = yes ]; then
        echo "!!!! LAN IPv6 route must be manually set to gateway. !!!!"
      fi
      ;;
    1 )
      enable_nptv6 || print_error enable_nptv6
      ;;
    2 )
      enable_napt6 || print_error enable_napt6
      ;;
    * ) echo "ERROR(main): <MODE_NAT6> must be between 0 and 2." 1>&2; return 1 ;;
  esac

  sleep 5

  # start hostapd
  if [ "$USE_HOSTAPD" = yes ]; then
    if [ "$VERBOSE" = yes ]; then
      echo "-- start hostapd"
    fi
    make_hostapd_conf router
    sudo cp "$CONF_HOSTAPD" "$ETC_HOSTAPD"
    rm "$CONF_HOSTAPD"
    sudo systemctl start hostapd
  fi

  # start dhcpd
  if [ -f "$CONF_DHCPD" ] || [ -f "$CONF_DHCP6D" ]; then
    if [ "$VERBOSE" = yes ]; then
      echo "-- start dhcpd"
    fi
    # make dhcp default file (CONF_DEFAULT_DHCPD)
    if [ -f "$CONF_DHCPD" ] && [ -f "$CONF_DHCP6D" ]; then
      make_def_dhcpd_conf dual
    elif [ -f "$CONF_DHCPD" ]; then
      make_def_dhcpd_conf v4only
    elif [ -f "$CONF_DHCP6D" ]; then
      make_def_dhcpd_conf v6only
    else
      echo "error!"
    fi
    if [ -f "$CONF_DHCPD" ]; then
      sudo cp "$CONF_DHCPD" "$ETC_DHCPD"
      rm "$CONF_DHCPD"
    fi
    if [ -f "$CONF_DHCP6D" ]; then
      sudo cp "$CONF_DHCP6D" "$ETC_DHCP6D"
      rm "$CONF_DHCP6D"
    fi

    sudo cp "$CONF_DEFAULT_DHCPD" "$ETC_DEFAULT_DHCPD"
    rm "$CONF_DEFAULT_DHCPD"
    sudo systemctl start isc-dhcp-server
  fi

  # start radvd
  if [ -f "$CONF_RADVD" ]; then
    if [ "$VERBOSE" = yes ]; then
      echo "-- start radvd"
    fi
    sudo cp "$CONF_RADVD" "$ETC_RADVD"
    rm "$CONF_RADVD"
    sudo systemctl start radvd
  fi

  # start unbound
  if [ -f "$CONF_UNBOUND" ]; then
    if [ "$VERBOSE" = yes ]; then
      echo "-- start unbound"
    fi
    sudo cp "$CONF_UNBOUND" "$ETC_UNBOUND"
    rm "$CONF_UNBOUND"
sleep 5
    sudo systemctl start unbound
  fi
}


#
# MAIN
#
if [ "$INTERACTIVE" = true ]; then
  [ -e $CONFIG ] || touch $CONFIG
  calc_wt_size
  while true; do
    FUN=$(whiptail --title "Raspberry Gate Configuration Tool" \
      --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
      --cancel-button Finish --ok-button Select \
      "1 Mode: " "Choose operation mode" \
      "2 WAN: " "Setup the parameters on WAN interface" \
      "3 LAN: " "Setup the parameters on LAN interface" \
      "4 Service: " "Setup the parameters for network services" \
      "5 Wireless: " "Setup the parameters for wireless services" \
      "6 Commit: " "Restart network configuration" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      exit 0
    elif [ $RET -eq 0 ]; then
      case "$FUN" in
        1\ *) do_mode_menu ;;
        2\ *) do_wan_menu ;;
        3\ *) do_lan_menu ;;
        4\ *) do_service_menu ;;
        5\ *) do_wireless_menu ;;
        6\ *) do_restart ;;
        *) whiptail --msgbox "Programmer error: unrecognized option." 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUN." 20 60 1
    else
      exit 1
    fi
  done
fi

exit 0
